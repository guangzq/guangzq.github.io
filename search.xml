<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[使用RxJava解决实际问题]]></title>
      <url>%2F2017%2F02%2F17%2F%E4%BD%BF%E7%94%A8RxJava%E8%A7%A3%E5%86%B3%E5%AE%9E%E9%99%85%E9%97%AE%E9%A2%98%2F</url>
      <content type="text"><![CDATA[RxJava学习有段时间了，项目中也有许多场景用到，比如防止多次点击，最近有个场景，日志的压缩上传，首先需要考虑压缩与上传不能同步执行，而且都需要在io线程中操作，并且要等待压缩后才能上传，获取不到压缩结束的状态，所以考虑压缩这一操作所在的线程结束，也就意味着压缩的结束，然后再执行上传操作，一开始是这样写的： 12345678910111213Thread thread = new Thread(new Runnable() &#123; @Override public void run() &#123; //TODO 压缩 &#125; &#125;); thread.start(); try &#123; thread.join(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; //TODO 上传操作 此处用join表示执行完子线程再向下执行，然而却造成了anr,应该是线程阻塞引起的 考虑到RxJava正是以异步著称的库，就是就改用RxJava来实现，用trampoline来实现这一需求再好不过了 Schedulers.trampoline( )当其它排队的任务完成后，在当前线程排队开始执行 用RxJava实现的代码 12345678910Scheduler scheduler = Schedulers.trampoline(); Scheduler.Worker worker = scheduler.createWorker(); worker.schedule(() -&gt; Schedulers.io().createWorker().schedule(() -&gt; &#123; L.line(&quot;start_zip&quot;); //TODO 压缩 worker.schedule(() -&gt; &#123; L.line(&quot;ziping&quot;); //TODO 上传操作 L.line(&quot;zip_end&quot;); &#125;)); 后记RxJava是个异步解决复杂流程的极好的库，是时候总结一波了]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[如何手动安装gradle]]></title>
      <url>%2F2017%2F02%2F14%2F%E5%A6%82%E4%BD%95%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85gradle%2F</url>
      <content type="text"><![CDATA[在运行lottie-android时，项目导不进AS中，推测应该是电脑本地中没有所需的gradle版本，在线下载太慢，所以选择离线安装，安装步骤如下 下载gradlehttps://services.gradle.org/distributions下载所需版本 配置方法项目一导入就已经在下载gradle了，这时候中断导入，强制关闭AS，然后后在 ~\.gradle\wrapper\dists相应的gradle版本下生成两个文件，将后缀为.part的文件删除，将所下载的.zip放在该目录下注意不要解压 后记lottle-android是一个优秀的安卓动画解决方案，动画流畅而且效率较高，唯一的难点是UI设计师需要设计出优秀的动画从而形成json]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[记录开发中遇到的错误以及注意点]]></title>
      <url>%2F2014%2F03%2F21%2F%E8%AE%B0%E5%BD%95%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF%E4%BB%A5%E5%8F%8A%E6%B3%A8%E6%84%8F%E7%82%B9%2F</url>
      <content type="text"><![CDATA[前言建立这篇的博文是为了记录开发中常见的错误以及注意点，一遍后面再遇到相同的错误时可以不用再浪费时间 NavigationTabBar底部导航栏有个比较好用的第三方库NavigationTabBar,其中几个需要注意的细节 Badge的位置给了三种，分别是left(25%), center(50%) and right(75%),当应用right显示却是错位的，可以修改 1private final static float RIGHT_FRACTION = 0.75F; WebView在使用WebView时候，会出现网页加载空白，要添加下面三行代码 123webView.setWebChromeClient(new WebChromeClient());webView.setWebViewClient(new WebViewClient());webView.getSettings().setJavaScriptEnabled(true); 其中，WebViewClient 主要提供网页加载各个阶段的通知，比如网页开始加载onPageStarted，网页结束加载onPageFinished等；WebChromeClient主要提供网页加载过程中提供的数据内容，比如返回网页的title,favicon等，setJavaScriptEnabled表示能够执行Javascript脚本 多人协作项目时，改代码要注意所有引用此处的地方，以免造成bugxml中，View写成view编译会报错的环信IncompatibleClassChangeError的问题项目中环信sdk由v2.3.2升级到v2.3.3的时候报这个错 12Fatal Exception: java.lang.IncompatibleClassChangeErrorThe method &apos;int com.google.android.gms.common.d.a(android.content.Context)&apos; was expected to be of type static but instead was found to be of type virtual (declaration of &apos;java.lang.reflect.ArtMethod&apos; appears in /system/framework/core-libart.jar) 其实debug版本没有问题，是在release版本中报的错，所以估计是配置混淆的问题，经过一番google,确定要在混淆文件中添加 12-keep class com.google.android.gms.** &#123; *; &#125;-dontwarn com.google.android.gms.** 测试没有问题！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Mac上搭建基于GitHub Page的Hexo博客]]></title>
      <url>%2F2014%2F01%2F20%2FMac%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EGitHub-Page%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[概述 最近一直想搭建自己的独立博客，在看了好多教程和踩坑之后，终于把博客搭建起来了，博客是基于Hexo+npm+git搭建的，建议之前还是有点基础比较好，要不然环境的搭建就比较麻烦 环境准备 git Node.js Hexo 步骤Node.js用来生成静态页面,从官网下载的会报错，所以建议使用淘宝的npm源在brew命令（以下命令都是基于brew） 1npm install -g cnpm --registry=https://registry.npm.taobao.org git用来将本地Hexo内容提交到Github上。Xcode自带Git，这里不再赘述 HexoNode.js和git都配置好之后，就可以安装Hexo了，执行命令 1sudo npm install -g hexo 初始化终端cd到一个你选定的目录，执行hexo init命令： 1hexo init blog blog是你建立的文件夹名称。cd到blog文件夹下，执行如下命令，安装npm： 1npm install 执行如下命令，开启hexo服务器： 1hexo s 优化细节图片如何调整大小在markdown语法中，一个方法之一是可以通过使用img标签 1&lt;img src=&quot;./xxx.png&quot; width = &quot;300&quot; height = &quot;200&quot; alt=&quot;图片名称&quot; align=center /&gt; Mac下如何自动打开MarkDown编辑器 首先在Hexo目录下的scripts目录中创建一个JavaScript脚本文件。如果没有这个scripts目录，则新建一个。名字任取。 在所创建的脚本.js中写入： 123456789var exec = require(&apos;child_process&apos;).exec;// Hexo 2.x 用户复制这段hexo.on(&apos;new&apos;, function(path)&#123; exec(&apos;open -a &quot;markdown编辑器绝对路径.app&quot; &apos; + path);&#125;);// Hexo 3 用户复制这段hexo.on(&apos;new&apos;, function(data)&#123; exec(&apos;open -a &quot;markdown编辑器绝对路径.app&quot; &apos; + data.path);&#125;); 不用通过hexo g就可以立即生效，可以创建一个文件试一下]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[这是我的第一篇博客]]></title>
      <url>%2F2014%2F01%2F01%2F%E8%BF%99%E6%98%AF%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[积跬步而至千里，这是我新创建的Hexo博客 技术积累一点一滴，稳扎稳打，步步为营 后记更多精彩，请关注我的博客]]></content>
    </entry>

    
  
  
</search>
